/*
 * This class will be the linkedstack which implements the stackinterface so it will have a top, push,
 * and pop. The base constructor sets the top to null, the constructor with a parameter will make a
 * newnode with the contents of the element which is an integer then setting the top to that new node
 * the push will make a newnode from the parameter, set its link to the top and then make the top the newnode
 * pop will make the top be the element below it
 * top will return the info of the top
 * is empty will check if the top is null and determine if its empty
 */

public class LinkedStack<T> implements StackInterface<T>
{

	protected LLNode<T> top;
	
	public LinkedStack()
	{
		top = null; //sets top to null
	}
	
	public LinkedStack(T element)
	{
		 LLNode<T> newNode = new LLNode<T>(element); //makes a new node
		 top = newNode; //sets the new node to the top of the stack
	}
	
	public void push(T grid)
	  {
	    // Put a new element on the top of the stack:
	    LLNode<T>newNode = new LLNode<T>(grid);   
	    newNode.setLink(top); //sets a link to the top                         
	    top = newNode; //becomes the new top
	  }
	
	public void pop() throws StackUnderflowException
	  {
	    // If stack not empty, removes the object from top of the stack
	    // If stack IS empty, throws StackUnderflowException
	    //
	    // (1) If stack empty, throw underflow exception.  
	    // (2) Make top point to what the first node currently points to
	    //
	    if (isEmpty())
	    	throw new StackUnderflowException("Attempt to pop empty stack");  //(1)
	    else 
	       top = top.getLink(); //(2)
	  }
	
	public T top() throws StackUnderflowException
	 {
	   // If stack is NOT empty, returns the object from the top of the
	   // stack. If stack IS empty, throws StackUnderflowException
	   //
	   if (isEmpty()) 
	       throw new StackUnderflowException("Attempted top() on empty stack");
	   else 
	       return top.getInfo();
	 }


	 public boolean isEmpty()
	 {
	   // returns true if the stack is empty; false if it is not empty
	   //
	   return (top == null);
	 }
}
